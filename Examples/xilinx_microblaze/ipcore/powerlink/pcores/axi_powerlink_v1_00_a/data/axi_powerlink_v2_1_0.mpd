#------------------------------------------------------------------------------------------------------------------------
#-- POWERLINK XPS AXI Component (Microprocessor Peripheral Definition - MPD)
#--
#-- 	  Copyright (C) 2011 B&R
#--
#--    Redistribution and use in source and binary forms, with or without
#--    modification, are permitted provided that the following conditions
#--    are met:
#--
#--    1. Redistributions of source code must retain the above copyright
#--       notice, this list of conditions and the following disclaimer.
#--
#--    2. Redistributions in binary form must reproduce the above copyright
#--       notice, this list of conditions and the following disclaimer in the
#--       documentation and/or other materials provided with the distribution.
#--
#--    3. Neither the name of B&R nor the names of its
#--       contributors may be used to endorse or promote products derived
#--       from this software without prior written permission. For written
#--       permission, please contact office@br-automation.com
#--
#--    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#--    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#--    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#--    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#--    COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#--    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#--    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#--    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#--    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#--    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#--    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#--    POSSIBILITY OF SUCH DAMAGE.
#--
#------------------------------------------------------------------------------------------------------------------------
#-- Version History
#------------------------------------------------------------------------------------------------------------------------
#-- 2012-01-12  V0.01   zelenkaj    derived from plb_powerlink
#-- 2012-01-26  V0.02   zelenkaj    Added number of SMI generic feature
#------------------------------------------------------------------------------------------------------------------------

BEGIN axi_powerlink

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION SYSLEVEL_DRC_PROC = syslevel_drc_proc
OPTION IPLEVEL_DRC_PROC = iplevel_drc_proc
OPTION DESC = AXI_POWERLINK
OPTION LONG_DESC = Powerlink IP-Core with AXI bus interface
OPTION IP_GROUP = 'Industrial Ethernet:MICROBLAZE:PPC'
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)

IO_INTERFACE IO_IF = PHY, IO_TYPE = XIL_Ethernet_V1
IO_INTERFACE IO_IF = PHY0, IO_TYPE = XIL_Ethernet_V1
IO_INTERFACE IO_IF = PHY1, IO_TYPE = XIL_Ethernet_V1
IO_INTERFACE IO_IF = PORTIO, IO_TYPE = XIL_GPIO_V1
IO_INTERFACE IO_IF = PAP, IO_TYPE = XIL_GPIO_V1
IO_INTERFACE IO_IF = SPI, IO_TYPE = XIL_GPIO_V1
IO_INTERFACE IO_IF = LED, IO_TYPE = XIL_GPIO_V1

## Bus Interfaces
### openMAC DMA (optional)
BUS_INTERFACE BUS = M_AXI_MAC_DMA, BUS_STD = AXI, BUS_TYPE = MASTER, ISVALID = (C_PACKET_LOCATION != 0)
### openMAC REG
BUS_INTERFACE BUS = S_AXI_MAC_REG, BUS_STD = AXI, BUS_TYPE = SLAVE
### openMAC PKT (optional)
BUS_INTERFACE BUS = S_AXI_MAC_PKT, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_PACKET_LOCATION != 2)
### PDI PCP (optional)
BUS_INTERFACE BUS = S_AXI_PDI_PCP, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
### PDI AP (optional)
BUS_INTERFACE BUS = S_AXI_PDI_AP, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_IP_CORE_MODE == 4)
### SimpleIO PCP (optional)
BUS_INTERFACE BUS = S_AXI_SMP_PCP, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_IP_CORE_MODE == 0)

## GUI parameters
# General 
PARAMETER C_IP_CORE_MODE = 0, DT = INTEGER, TYPE = NON_HDL, RANGE = (0,1,3,4,5), VALUES = (0 = "Direct IO", 1 = "Parallel interface", 3 = "SPI interface", 4 = "AXI bus", 5 = "openMAC only") 
PARAMETER C_GEN_PDI = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = get_pdi_enable
PARAMETER C_GEN_PAR_IF = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = get_par_if_enable
PARAMETER C_GEN_SPI_IF = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = get_spi_if_enable
PARAMETER C_GEN_AXI_BUS_IF = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = get_axi_bus_enable
PARAMETER C_GEN_SIMPLE_IO = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = get_simple_io_enable

# openMAC
PARAMETER C_PACKET_LOCATION = 0, DT = INTEGER, RANGE = (0:2), TYPE = NON_HDL, VALUES = ( 0 = "TX and RX into DPRAM", 1 = "TX into DPRAM and RX over AXI", 2 = "TX and RX over AXI" )
PARAMETER C_MAC_RX_BUFFERS = 16, DT = INTEGER, RANGE = (1:16), SYSLEVEL_UPDATE_VALUE_PROC = calc_mac_rx_buffers 
PARAMETER C_TX_INT_PKT = FALSE, DT = BOOLEAN, VALUES = (FALSE = EXT, TRUE = BRAM), SYSLEVEL_UPDATE_VALUE_PROC = update_tx_packet_location
PARAMETER C_RX_INT_PKT = FALSE, DT = BOOLEAN, VALUES = (FALSE = EXT, TRUE = BRAM), SYSLEVEL_UPDATE_VALUE_PROC = update_rx_packet_location

PARAMETER C_USE_RMII = FALSE, DT = BOOLEAN, VALUES = (FALSE = MII, TRUE = RMII)
PARAMETER C_USE_2ND_PHY = TRUE, DT = BOOLEAN
PARAMETER C_NUM_SMI = 1, DT = INTEGER, RANGE = (1,2)
PARAMETER C_MAC_NUM_RPDO_USER = 3, DT = INTEGER,RANGE = (1:3), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 0)
PARAMETER C_MAC_NUM_TPDO_USER = 1, DT = INTEGER,RANGE = (1), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 0) 
PARAMETER C_MAC_NUM_RX_BUFFER_USER = 4, DT = INTEGER, RANGE = (4:16), TYPE = NON_HDL, ISVALID = C_IP_CORE_MODE == 5
PARAMETER C_MAC_PKT_SIZE_TX_USER = 7000, DT = INTEGER, TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 5 && C_PACKET_LOCATION < 2) 
PARAMETER C_INSTANCE_ODDR2 = FALSE, DT = BOOLEAN

# PDI
PARAMETER C_PDI_REVISION = 2, DT = INTEGER,RANGE = (1:255), TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)

PARAMETER C_PDI_NUM_RPDO_USER = 3, DT = INTEGER,RANGE = (1:3), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_RPDO_BUF_SIZE_USER = 50, DT = INTEGER, RANGE = (1:1500), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)  
PARAMETER C_PDI_NUM_TPDO_USER = 1, DT = INTEGER, TYPE = NON_HDL, RANGE = (1), ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_TPDO_BUF_SIZE_USER = 50, DT = INTEGER, RANGE = (1:1500), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)  
PARAMETER C_PDI_ASYNC_BUF_0_SIZE_USER = 50, DT = INTEGER, RANGE = (20:1500), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_ASYNC_BUF_1_SIZE_USER = 50, DT = INTEGER, RANGE = (0:1500), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)

PARAMETER C_PDI_GEN_ASYNC_BUF_0 = TRUE, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4), SYSLEVEL_UPDATE_VALUE_PROC = gen_async_0_buffer
PARAMETER C_PDI_ASYNC_BUF_0 = 50, DT = INTEGER, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4), SYSLEVEL_UPDATE_VALUE_PROC = calc_async_0_buffer_size
PARAMETER C_PDI_GEN_ASYNC_BUF_1 = TRUE, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4), SYSLEVEL_UPDATE_VALUE_PROC = gen_async_1_buffer
PARAMETER C_PDI_ASYNC_BUF_1 = 50, DT = INTEGER, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4), SYSLEVEL_UPDATE_VALUE_PROC = calc_async_1_buffer_size

PARAMETER C_PDI_GEN_LED = false, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_GEN_TIME_SYNC = true, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_GEN_SECOND_TIMER = false, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_GEN_EVENT = true, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4) 

#global pdi and mac
PARAMETER C_NUM_RPDO = 3, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_rpdo_count
PARAMETER C_NUM_TPDO = 1, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_tpdo_count
PARAMETER C_RPDO_0_BUF_SIZE = 100, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_rpdo_0_buffer_size
PARAMETER C_RPDO_1_BUF_SIZE = 100, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_rpdo_1_buffer_size
PARAMETER C_RPDO_2_BUF_SIZE = 100, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_rpdo_2_buffer_size
PARAMETER C_TPDO_BUF_SIZE = 100, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_tpdo_buffer_size
PARAMETER C_MAC_PKT_SIZE = 1500, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_mac_packet_size  
PARAMETER C_MAC_PKT_SIZE_LOG2 = 1500, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_mac_packet_size_log2

#debug
PARAMETER C_OBSERVER_ENABLE_USER = FALSE, TYPE = NON_HDL, DT = BOOLEAN, ISVALID = (C_PACKET_LOCATION != 0)
PARAMETER C_OBSERVER_ENABLE = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = calc_dma_observer_state 

# Parallel interface
PARAMETER C_PAP_LOW_ACT = FALSE, DT = BOOLEAN, VALUES = (FALSE = "High Active", TRUE = "Low Active"), ISVALID = (C_IP_CORE_MODE == 1)
PARAMETER C_PAP_DATA_WIDTH = 8, DT = INTEGER, RANGE = (8,16), ISVALID = (C_IP_CORE_MODE == 1) 
PARAMETER C_PAP_BIG_END = FALSE, DT = BOOLEAN, VALUES = (FALSE = "Little Endian", TRUE = "Big Endian"), ISVALID = (C_IP_CORE_MODE == 1)
# SPI interface
PARAMETER C_SPI_CPOL = FALSE, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 3)
PARAMETER C_SPI_CPHA = FALSE, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 3) 
PARAMETER C_SPI_BIG_END = FALSE, DT = BOOLEAN, VALUES = (FALSE = "Little Endian", TRUE = "Big Endian"), ISVALID = (C_IP_CORE_MODE == 3)
# Simple IO
PARAMETER C_PIO_VAL_LENGTH = 50, DT = INTEGER, ISVALID = (C_IP_CORE_MODE == 0)


### openMAC DMA
PARAMETER C_M_AXI_MAC_DMA_ADDR_WIDTH = 32, DT = integer, BUS = M_AXI_MAC_DMA, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_MAC_DMA_DATA_WIDTH = 32, DT = integer, BUS = M_AXI_MAC_DMA, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_MAC_DMA_NATIVE_DWIDTH = 32, DT = integer, RANGE = (32), BUS = M_AXI_MAC_DMA, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_MAC_DMA_LENGTH_WIDTH = 12, DT = integer, RANGE = (12), BUS = M_AXI_MAC_DMA, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_DMA_BURST_SIZE_RX = 32, DT = INTEGER, RANGE = (16,32,64,128,256), ISVALID = (C_PACKET_LOCATION != 0)
PARAMETER C_MAC_DMA_FIFO_SIZE_RX = 64, DT = INTEGER, RANGE = (C_MAC_DMA_BURST_SIZE_RX*2,C_MAC_DMA_BURST_SIZE_RX*3,C_MAC_DMA_BURST_SIZE_RX*4), ISVALID = (C_PACKET_LOCATION != 0)
PARAMETER C_MAC_DMA_BURST_SIZE_TX = 32, DT = INTEGER, RANGE = (16,32,64,128,256), ISVALID = (C_PACKET_LOCATION != 0 && C_PACKET_LOCATION != 1)
PARAMETER C_MAC_DMA_FIFO_SIZE_TX = 64, DT = INTEGER, RANGE = (C_MAC_DMA_BURST_SIZE_TX*2,C_MAC_DMA_BURST_SIZE_TX*3,C_MAC_DMA_BURST_SIZE_TX*4), ISVALID = (C_PACKET_LOCATION != 0 && C_PACKET_LOCATION != 1)
PARAMETER C_M_AXI_MAC_DMA_MAX_BURST_LEN = 16, DT = integer, RANGE = (16,32,64,128,256), BUS = M_AXI_MAC_DMA, SYSLEVEL_UPDATE_VALUE_PROC = calc_mac_dma_max_burst_len
PARAMETER C_M_AXI_MAC_DMA_PROTOCOL = AXI4, DT = string, BUS = M_AXI_MAC_DMA, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

### openMAC REG
PARAMETER C_S_AXI_MAC_REG_NUM_ADDR_RANGES = 2, DT = integer, BUS = S_AXI_MAC_REG, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MAC_REG_RNG0_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = S_AXI_MAC_REG, ADDRESS = BASE, PAIR = C_S_AXI_MAC_REG_RNG0_HIGHADDR, MIN_SIZE = 0x2000, ASSIGNMENT = REQUIRE
PARAMETER C_S_AXI_MAC_REG_RNG0_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = S_AXI_MAC_REG, ADDRESS = HIGH, PAIR = C_S_AXI_MAC_REG_RNG0_BASEADDR, ASSIGNMENT = REQUIRE
PARAMETER C_S_AXI_MAC_REG_RNG1_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = S_AXI_MAC_REG, ADDRESS = BASE, PAIR = C_S_AXI_MAC_REG_RNG1_HIGHADDR, MIN_SIZE = 0x10, ASSIGNMENT = REQUIRE
PARAMETER C_S_AXI_MAC_REG_RNG1_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = S_AXI_MAC_REG, ADDRESS = HIGH, PAIR = C_S_AXI_MAC_REG_RNG1_BASEADDR, ASSIGNMENT = REQUIRE
PARAMETER C_S_AXI_MAC_REG_DATA_WIDTH = 32, DT = integer, BUS = S_AXI_MAC_REG, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MAC_REG_ADDR_WIDTH = 32, DT = integer, BUS = S_AXI_MAC_REG, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MAC_REG_ACLK_FREQ_HZ = 50000000, DT = integer, BUS = S_AXI_MAC_REG, IPLEVEL_DRC_PROC = drc_mac_reg_aclk_freq, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_MAC_REG_USE_WSTRB = 1, DT = integer, ASSIGNMENT = CONSTANT, BUS = S_AXI_MAC_REG
PARAMETER C_S_AXI_MAC_REG_DPHASE_TIMEOUT = 0, DT = integer, RANGE = (0:512), BUS = S_AXI_MAC_REG
PARAMETER C_S_AXI_MAC_REG_PROTOCOL = AXI4LITE, DT = string, BUS = S_AXI_MAC_REG, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

### openMAC PKT
PARAMETER C_S_AXI_MAC_PKT_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = S_AXI_MAC_PKT, ADDRESS = BASE, PAIR = C_S_AXI_MAC_PKT_HIGHADDR, MIN_SIZE = 0x10000, ASSIGNMENT = REQUIRE, IPLEVEL_DRC_PROC = drc_mac_pkt_base_addr, ISVALID = (C_PACKET_LOCATION != 2)#, IPLEVEL_DRC_PROC = drc_mac_pkt_base_addr,
PARAMETER C_S_AXI_MAC_PKT_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = S_AXI_MAC_PKT, ADDRESS = HIGH, PAIR = C_S_AXI_MAC_PKT_BASEADDR, ASSIGNMENT = REQUIRE, IPLEVEL_DRC_PROC = drc_mac_pkt_high_addr, ISVALID = (C_PACKET_LOCATION != 2)#, IPLEVEL_DRC_PROC = drc_mac_pkt_high_addr
PARAMETER C_S_AXI_MAC_PKT_DATA_WIDTH = 32, DT = integer, BUS = S_AXI_MAC_PKT, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MAC_PKT_ADDR_WIDTH = 32, DT = integer, BUS = S_AXI_MAC_PKT, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MAC_PKT_USE_WSTRB = 1, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MAC_PKT_DPHASE_TIMEOUT = 0, DT = integer, RANGE = (0:512)
PARAMETER C_S_AXI_MAC_PKT_PROTOCOL = AXI4LITE, DT = string, BUS = S_AXI_MAC_PKT, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

### PDI PCP
PARAMETER C_S_AXI_PDI_PCP_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = S_AXI_PDI_PCP, ADDRESS = BASE, PAIR = C_S_AXI_PDI_PCP_HIGHADDR, MIN_SIZE = 0x8000, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
PARAMETER C_S_AXI_PDI_PCP_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = S_AXI_PDI_PCP, ADDRESS = HIGH, PAIR = C_S_AXI_PDI_PCP_BASEADDR, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
PARAMETER C_S_AXI_PDI_PCP_DATA_WIDTH = 32, DT = integer, BUS = S_AXI_PDI_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_PDI_PCP_ADDR_WIDTH = 32, DT = integer, BUS = S_AXI_PDI_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_PDI_PCP_USE_WSTRB = 1, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_PDI_PCP_DPHASE_TIMEOUT = 0, DT = integer, RANGE = (0:512)
PARAMETER C_S_AXI_PDI_PCP_PROTOCOL = AXI4LITE, DT = string, BUS = S_AXI_PDI_PCP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

### PDI AP
PARAMETER C_S_AXI_PDI_AP_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = S_AXI_PDI_AP, ADDRESS = BASE, PAIR = C_S_AXI_PDI_AP_HIGHADDR, MIN_SIZE = 0x8000, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE == 4)
PARAMETER C_S_AXI_PDI_AP_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = S_AXI_PDI_AP, ADDRESS = HIGH, PAIR = C_S_AXI_PDI_AP_BASEADDR, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE == 4)
PARAMETER C_S_AXI_PDI_AP_DATA_WIDTH = 32, DT = integer, BUS = S_AXI_PDI_AP, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_PDI_AP_ADDR_WIDTH = 32, DT = integer, BUS = S_AXI_PDI_AP, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_PDI_AP_USE_WSTRB = 1, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_PDI_AP_DPHASE_TIMEOUT = 0, DT = integer, RANGE = (0:512)
PARAMETER C_S_AXI_PDI_AP_PROTOCOL = AXI4LITE, DT = string, BUS = S_AXI_PDI_AP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

### SimpleIO
PARAMETER C_S_AXI_SMP_PCP_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = S_AXI_SMP_PCP, ADDRESS = BASE, PAIR = C_S_AXI_SMP_PCP_HIGHADDR, MIN_SIZE = 0x8, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE == 0)
PARAMETER C_S_AXI_SMP_PCP_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = S_AXI_SMP_PCP, ADDRESS = HIGH, PAIR = C_S_AXI_SMP_PCP_BASEADDR, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE == 0)
PARAMETER C_S_AXI_SMP_PCP_DATA_WIDTH = 32, DT = integer, BUS = S_AXI_SMP_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_SMP_PCP_ADDR_WIDTH = 32, DT = integer, BUS = S_AXI_SMP_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_SMP_PCP_USE_WSTRB = 1, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_SMP_PCP_DPHASE_TIMEOUT = 0, DT = integer, RANGE = (0:512)
PARAMETER C_S_AXI_SMP_PCP_PROTOCOL = AXI4LITE, DT = string, BUS = S_AXI_SMP_PCP, ASSIGNMENT = CONSTANT, TYPE = NON_HDL


## Ports
PORT test_port = "", DIR = O, VEC = [255:0]
### Clk
PORT clk100 = "", DIR = I, SIGIS = CLK, ISVALID = (C_USE_RMII)
### 
PORT phy_SMIDat = "", DIR = INOUT, THREE_STATE = TRUE, IO_IF = PHY, IO_IS = smi_dio, ISVALID = ((C_USE_2ND_PHY && C_NUM_SMI == 1) || !C_USE_2ND_PHY)
PORT phy_SMIClk = "", DIR = OUT, IO_IF = PHY, IO_IS = smi_clk, ISVALID = ((C_USE_2ND_PHY && C_NUM_SMI == 1) || !C_USE_2ND_PHY)
PORT phy_Rst_n = "", DIR = OUT, IO_IF = PHY, IO_IS = smi_rst, ISVALID = ((C_USE_2ND_PHY && C_NUM_SMI == 1) || !C_USE_2ND_PHY)
### PHY0
PORT phy0_SMIDat = "", DIR = INOUT, THREE_STATE = TRUE, IO_IF = PHY0, IO_IS = smi_dio, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2)
PORT phy0_SMIClk = "", DIR = OUT, IO_IF = PHY0, IO_IS = smi_clk, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2)
PORT phy0_Rst_n = "", DIR = OUT, IO_IF = PHY0, IO_IS = smi_rst, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2)
PORT phy0_link = "", DIR = IN, IO_IF = PHY0, IO_IS = phy_link
#### MII
PORT phyMii0_RxClk = "", DIR = IN, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_rxclk
PORT phyMii0_RxDat = "", DIR = IN, VEC = [3:0], ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_rxdat
PORT phyMii0_RxDv = "", DIR = IN, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_rxdv
PORT phyMii0_RxEr = "", DIR = IN, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_rxer
PORT phyMii0_TxClk = "", DIR = IN, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_txclk
PORT phyMii0_TxDat = "", DIR = OUT, VEC = [3:0], ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_txdat
PORT phyMii0_TxEn = "", DIR = OUT, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_txen
PORT phyMii0_TxEr = "", DIR = OUT, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_txer
#### RMII
PORT phy0_clk = "", DIR = OUT, SIGIS = Clk, ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_clk
PORT phy0_RxDat = "", DIR = IN, VEC = [1:0], ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_rxdat
PORT phy0_RxDv = "", DIR = IN, ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_rxdv
PORT phy0_RxErr = "", DIR = IN, ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_rxer
PORT phy0_TxDat = "", DIR = OUT, VEC = [1:0], ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_txdat
PORT phy0_TxEn = "", DIR = OUT, ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_txen

### PHY1
PORT phy1_SMIDat = "", DIR = INOUT, THREE_STATE = TRUE, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2), IO_IF = PHY1, IO_IS = smi_dio
PORT phy1_SMIClk = "", DIR = OUT, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2), IO_IF = PHY1, IO_IS = smi_clk
PORT phy1_Rst_n = "", DIR = OUT, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2), IO_IF = PHY1, IO_IS = smi_rst
PORT phy1_link = "", DIR = IN, ISVALID = (C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = phy_link
#### MII
PORT phyMii1_RxClk = "", DIR = IN, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_rxclk
PORT phyMii1_RxDat = "", DIR = IN, VEC = [3:0], ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_rxdat
PORT phyMii1_RxDv = "", DIR = IN, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_rxdv
PORT phyMii1_RxEr = "", DIR = IN, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_rxer
PORT phyMii1_TxClk = "", DIR = IN, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_txclk
PORT phyMii1_TxDat = "", DIR = OUT, VEC = [3:0], ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_txdat
PORT phyMii1_TxEn = "", DIR = OUT, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_txen
PORT phyMii1_TxEr = "", DIR = OUT, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_txer
#### RMII
PORT phy1_clk = "", DIR = OUT, SIGIS = Clk, ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_clk
PORT phy1_RxDat = "", DIR = IN, VEC = [1:0], ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_rxdat
PORT phy1_RxDv = "", DIR = IN, ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_rxdv
PORT phy1_RxErr = "", DIR = IN, ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_rxer
PORT phy1_TxDat = "", DIR = OUT, VEC = [1:0], ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_txdat
PORT phy1_TxEn = "", DIR = OUT, ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_txen

### Interrupts
PORT mac_irq = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT tcp_irq = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT ap_syncIrq = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
PORT ap_syncIrq_n = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_LOW, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
PORT ap_asyncIrq = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
PORT ap_asyncIrq_n = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_LOW, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)

### Portio
PORT pio_pconfig = "", DIR = IN, VEC = [3:0], ISVALID = (C_IP_CORE_MODE == 0), IO_IF = PORTIO
PORT pio_portinlatch = "", DIR = IN, VEC = [3:0], ISVALID = (C_IP_CORE_MODE == 0), IO_IF = PORTIO
PORT pio_portio = "", DIR = INOUT, VEC = [31:0], THREE_STATE = TRUE, ENABLE = MULTI, ISVALID = (C_IP_CORE_MODE == 0), IO_IF = PORTIO
PORT pio_portOutValid = "", DIR = OUT, VEC = [3:0], ISVALID = (C_IP_CORE_MODE == 0), IO_IF = PORTIO 
PORT pio_operational = "", DIR = OUT, ISVALID = (C_IP_CORE_MODE == 0), IO_IF = PORTIO 


### SPI
PORT spi_clk = "", DIR = IN, IO_IF = SPI, ISVALID = (C_IP_CORE_MODE == 3)
PORT spi_mosi = "", DIR = IN, IO_IF = SPI, ISVALID = (C_IP_CORE_MODE == 3)
PORT spi_miso = "", DIR = OUT, IO_IF = SPI, ISVALID = (C_IP_CORE_MODE == 3)
PORT spi_sel_n = "", DIR = IN, IO_IF = SPI, ISVALID = (C_IP_CORE_MODE == 3)


### Parallel Interface
PORT pap_cs = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == FALSE)
PORT pap_cs_n = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == TRUE)
PORT pap_rd = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == FALSE)
PORT pap_rd_n = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == TRUE)
PORT pap_wr = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == FALSE)
PORT pap_wr_n = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == TRUE)
PORT pap_addr = "", DIR = IN, IO_IF = PAP, VEC = [15:0], ISVALID = C_IP_CORE_MODE == 1
PORT pap_data = "", DIR = INOUT, IO_IF = PAP, VEC = [C_PAP_DATA_WIDTH-1:0], THREE_STATE = TRUE, ISVALID = (C_IP_CORE_MODE == 1)
PORT pap_be = "", DIR = IN, IO_IF = PAP, VEC = [(C_PAP_DATA_WIDTH/8)-1:0], ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == FALSE)
PORT pap_be_n = "", DIR = IN, IO_IF = PAP, VEC = [(C_PAP_DATA_WIDTH/8)-1:0], ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == TRUE)
PORT pap_ack = "", DIR = OUT, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == FALSE)
PORT pap_ack_n = "", DIR = OUT, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == TRUE)
PORT pap_gpio = "", DIR = INOUT, IO_IF = PAP, VEC = [1:0], THREE_STATE = TRUE, ENABLE = MULTI, ISVALID = (C_IP_CORE_MODE == 1)

### LED
PORT led_error = "", DIR = OUT, IO_IF = LED, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PORT led_status = "", DIR = OUT, IO_IF = LED, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PORT led_gpo = "", DIR = OUT, VEC = [7:0], IO_IF = LED, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PORT led_opt = "", DIR = OUT, VEC = [1:0], IO_IF = LED, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PORT led_phyAct = "", DIR = OUT, VEC = [1:0], IO_IF = LED, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PORT led_phyLink = "", DIR = OUT, VEC = [1:0], IO_IF = LED, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)


### openMAC DMA
PORT M_AXI_MAC_DMA_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_md_error = "", DIR = O
PORT M_AXI_MAC_DMA_arready = ARREADY, DIR = I, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_awready = AWREADY, DIR = I, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_bvalid = BVALID, DIR = I, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_rlast = RLAST, DIR = I, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_rvalid = RVALID, DIR = I, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_wready = WREADY, DIR = I, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_bresp = BRESP, DIR = I, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_rdata = RDATA, DIR = I, VEC = [C_M_AXI_MAC_DMA_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_rresp = RRESP, DIR = I, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_arvalid = ARVALID, DIR = O, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_awvalid = AWVALID, DIR = O, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_bready = BREADY, DIR = O, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_rready = RREADY, DIR = O, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_wlast = WLAST, DIR = O, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_wvalid = WVALID, DIR = O, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_araddr = ARADDR, DIR = O, VEC = [C_M_AXI_MAC_DMA_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_arburst = ARBURST, DIR = O, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_arcache = ARCACHE, DIR = O, VEC = [3:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_arlen = ARLEN, DIR = O, VEC = [7:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_arprot = ARPROT, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_arsize = ARSIZE, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_awaddr = AWADDR, DIR = O, VEC = [C_M_AXI_MAC_DMA_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_awburst = AWBURST, DIR = O, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_awcache = AWCACHE, DIR = O, VEC = [3:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_awlen = AWLEN, DIR = O, VEC = [7:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_awprot = AWPROT, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_awsize = AWSIZE, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_wdata = WDATA, DIR = O, VEC = [C_M_AXI_MAC_DMA_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA
PORT M_AXI_MAC_DMA_wstrb = WSTRB, DIR = O, VEC = [(C_M_AXI_MAC_DMA_DATA_WIDTH/8)-1:0], ENDIAN = LITTLE, BUS = M_AXI_MAC_DMA

### openMAC REG
PORT S_AXI_MAC_REG_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_ARVALID = ARVALID, DIR = I, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_AWVALID = AWVALID, DIR = I, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_BREADY = BREADY, DIR = I, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_RREADY = RREADY, DIR = I, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_WVALID = WVALID, DIR = I, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_ARADDR = ARADDR, DIR = I, VEC = [C_S_AXI_MAC_REG_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_AWADDR = AWADDR, DIR = I, VEC = [C_S_AXI_MAC_REG_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_WDATA = WDATA, DIR = I, VEC = [C_S_AXI_MAC_REG_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_WSTRB = WSTRB, DIR = I, VEC = [(C_S_AXI_MAC_REG_DATA_WIDTH/8)-1:0], ENDIAN = LITTLE, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_ARREADY = ARREADY, DIR = O, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_AWREADY = AWREADY, DIR = O, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_BVALID = BVALID, DIR = O, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_RVALID = RVALID, DIR = O, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_WREADY = WREADY, DIR = O, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_RDATA = RDATA, DIR = O, VEC = [C_S_AXI_MAC_REG_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_MAC_REG
PORT S_AXI_MAC_REG_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_MAC_REG

### openMAC PKT
PORT S_AXI_MAC_PKT_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_ARVALID = ARVALID, DIR = I, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_AWVALID = AWVALID, DIR = I, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_BREADY = BREADY, DIR = I, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_RREADY = RREADY, DIR = I, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_WVALID = WVALID, DIR = I, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_ARADDR = ARADDR, DIR = I, VEC = [C_S_AXI_MAC_PKT_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_AWADDR = AWADDR, DIR = I, VEC = [C_S_AXI_MAC_PKT_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_WDATA = WDATA, DIR = I, VEC = [C_S_AXI_MAC_PKT_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_WSTRB = WSTRB, DIR = I, VEC = [(C_S_AXI_MAC_PKT_DATA_WIDTH/8)-1:0], ENDIAN = LITTLE, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_ARREADY = ARREADY, DIR = O, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_AWREADY = AWREADY, DIR = O, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_BVALID = BVALID, DIR = O, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_RVALID = RVALID, DIR = O, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_WREADY = WREADY, DIR = O, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_RDATA = RDATA, DIR = O, VEC = [C_S_AXI_MAC_PKT_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_MAC_PKT
PORT S_AXI_MAC_PKT_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_MAC_PKT

### PDI PCP
PORT S_AXI_PDI_PCP_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_ARVALID = ARVALID, DIR = I, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_AWVALID = AWVALID, DIR = I, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_BREADY = BREADY, DIR = I, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_RREADY = RREADY, DIR = I, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_WVALID = WVALID, DIR = I, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_ARADDR = ARADDR, DIR = I, VEC = [C_S_AXI_PDI_PCP_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_AWADDR = AWADDR, DIR = I, VEC = [C_S_AXI_PDI_PCP_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_WDATA = WDATA, DIR = I, VEC = [C_S_AXI_PDI_PCP_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_WSTRB = WSTRB, DIR = I, VEC = [(C_S_AXI_PDI_PCP_DATA_WIDTH/8)-1:0], ENDIAN = LITTLE, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_ARREADY = ARREADY, DIR = O, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_AWREADY = AWREADY, DIR = O, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_BVALID = BVALID, DIR = O, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_RVALID = RVALID, DIR = O, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_WREADY = WREADY, DIR = O, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_RDATA = RDATA, DIR = O, VEC = [C_S_AXI_PDI_PCP_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_PDI_PCP
PORT S_AXI_PDI_PCP_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_PDI_PCP

### PDI AP
PORT S_AXI_PDI_AP_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_ARVALID = ARVALID, DIR = I, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_AWVALID = AWVALID, DIR = I, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_BREADY = BREADY, DIR = I, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_RREADY = RREADY, DIR = I, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_WVALID = WVALID, DIR = I, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_ARADDR = ARADDR, DIR = I, VEC = [C_S_AXI_PDI_AP_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_AWADDR = AWADDR, DIR = I, VEC = [C_S_AXI_PDI_AP_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_WDATA = WDATA, DIR = I, VEC = [C_S_AXI_PDI_AP_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_WSTRB = WSTRB, DIR = I, VEC = [(C_S_AXI_PDI_AP_DATA_WIDTH/8)-1:0], ENDIAN = LITTLE, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_ARREADY = ARREADY, DIR = O, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_AWREADY = AWREADY, DIR = O, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_BVALID = BVALID, DIR = O, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_RVALID = RVALID, DIR = O, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_WREADY = WREADY, DIR = O, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_RDATA = RDATA, DIR = O, VEC = [C_S_AXI_PDI_AP_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_PDI_AP
PORT S_AXI_PDI_AP_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_PDI_AP
	
### SimpleIO PCP
PORT S_AXI_SMP_PCP_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_ARVALID = ARVALID, DIR = I, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_AWVALID = AWVALID, DIR = I, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_BREADY = BREADY, DIR = I, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_RREADY = RREADY, DIR = I, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_WVALID = WVALID, DIR = I, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_ARADDR = ARADDR, DIR = I, VEC = [C_S_AXI_SMP_PCP_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_AWADDR = AWADDR, DIR = I, VEC = [C_S_AXI_SMP_PCP_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_WDATA = WDATA, DIR = I, VEC = [C_S_AXI_SMP_PCP_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_WSTRB = WSTRB, DIR = I, VEC = [(C_S_AXI_SMP_PCP_DATA_WIDTH/8)-1:0], ENDIAN = LITTLE, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_ARREADY = ARREADY, DIR = O, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_AWREADY = AWREADY, DIR = O, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_BVALID = BVALID, DIR = O, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_RVALID = RVALID, DIR = O, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_WREADY = WREADY, DIR = O, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_RDATA = RDATA, DIR = O, VEC = [C_S_AXI_SMP_PCP_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI_SMP_PCP
PORT S_AXI_SMP_PCP_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_SMP_PCP


END


