#------------------------------------------------------------------------------------------------------------------------
#-- POWERLINK XPS PLB Component (Microprocessor Peripheral Definition - MPD)
#--
#--       Copyright (C) 2011 B&R
#--
#--    Redistribution and use in source and binary forms, with or without
#--    modification, are permitted provided that the following conditions
#--    are met:
#--
#--    1. Redistributions of source code must retain the above copyright
#--       notice, this list of conditions and the following disclaimer.
#--
#--    2. Redistributions in binary form must reproduce the above copyright
#--       notice, this list of conditions and the following disclaimer in the
#--       documentation and/or other materials provided with the distribution.
#--
#--    3. Neither the name of B&R nor the names of its
#--       contributors may be used to endorse or promote products derived
#--       from this software without prior written permission. For written
#--       permission, please contact office@br-automation.com
#--
#--    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#--    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#--    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#--    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#--    COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#--    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#--    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#--    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#--    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#--    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#--    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#--    POSSIBILITY OF SUCH DAMAGE.
#--
#------------------------------------------------------------------------------------------------------------------------
#-- Version History
#------------------------------------------------------------------------------------------------------------------------
#-- 2011-11-16  V0.01   zelenkaj    converted to first stable solution with MAC-layer only
#-- 2011-11-25  V0.02   mairt       removed MAC_CMP to reduce resource utilization
#-- 2011-11-28  V0.03   mairt       added bus interface for pdi pcp, pdi ap and simple io
#-- 2011-12-02  V0.04   zelenkaj    Exchanged IOs with _I, _O and _T, added missing ISVALIDs
#-- 2011-12-05  V0.05   zelenkaj    Changed ISVALID for PKT and DMA
#-- 2011-12-06  V0.06   mairt       added packet size calculation and fixed some bugs
#-- 2011-12-16  V0.07   mairt       added ability to set TX/RX burst size separately
#-- 2012-01-09  V0.08   mairt       added DRC procedures
#--                     zelenkaj    renamed AP sync IRQ
#-- 2012-01-19  V0.09   zelenkaj    added 50 MHz clock input and bus2core clk ratio
#-- 2012-01-20  V0.10   mairt       mac reg clock frequency is now check with a DRC
#-- 2012-01-23  V0.11   zelenkaj    added LED ports
#-- 2012-01-26  V0.10   zelenkaj    Added number of SMI generic feature
#-- 2012-02-01  V0.11   zelenkaj    Added RMII clk out
#-- 2012-02-01  V0.12   mairt       openmac only mode RX buffer number is now a user entry
#-- 2012-02-07  V0.13   mairt       reduced timesync module to just one parameter
#------------------------------------------------------------------------------------------------------------------------

BEGIN plb_powerlink

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION SYSLEVEL_DRC_PROC = syslevel_drc_proc
OPTION IPLEVEL_DRC_PROC = iplevel_drc_proc
OPTION DESC = PLB_POWERLINK
OPTION LONG_DESC = Powerlink IP-Core with PLB bus interface
OPTION IP_GROUP = 'Industrial Ethernet:MICROBLAZE:PPC'
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)

IO_INTERFACE IO_IF = PHY, IO_TYPE = XIL_Ethernet_V1
IO_INTERFACE IO_IF = PHY0, IO_TYPE = XIL_Ethernet_V1
IO_INTERFACE IO_IF = PHY1, IO_TYPE = XIL_Ethernet_V1
IO_INTERFACE IO_IF = PORTIO, IO_TYPE = XIL_GPIO_V1
IO_INTERFACE IO_IF = PAP, IO_TYPE = XIL_GPIO_V1
IO_INTERFACE IO_IF = SPI, IO_TYPE = XIL_GPIO_V1
IO_INTERFACE IO_IF = LED, IO_TYPE = XIL_GPIO_V1

## Bus Interfaces
### openMAC DMA (optional)
BUS_INTERFACE BUS = MAC_DMA, BUS_STD = PLBV46, BUS_TYPE = MASTER, GENERATE_BURSTS = TRUE, ISVALID = (C_PACKET_LOCATION != 0)
### openMAC REG
BUS_INTERFACE BUS = MAC_REG, BUS_STD = PLBV46, BUS_TYPE = SLAVE
### openMAC PKT (optional)
BUS_INTERFACE BUS = MAC_PKT, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_PACKET_LOCATION != 2)
### PDI PCP (optional)
BUS_INTERFACE BUS = PDI_PCP, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
### PDI AP (optional)
BUS_INTERFACE BUS = PDI_AP, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_IP_CORE_MODE == 4)
### SimpleIO PCP (optional)
BUS_INTERFACE BUS = SMP_PCP, BUS_STD = PLBV46, BUS_TYPE = SLAVE, ISVALID = (C_IP_CORE_MODE == 0)

## GUI parameters
# General
PARAMETER C_IP_CORE_MODE = 0, DT = INTEGER, TYPE = NON_HDL, RANGE = (0,1,3,4,5), VALUES = (0 = "Direct IO", 1 = "Parallel interface", 3 = "SPI interface", 4 = "PLB bus", 5 = "openMAC only")
PARAMETER C_GEN_PDI = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = get_pdi_enable
PARAMETER C_GEN_PAR_IF = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = get_par_if_enable
PARAMETER C_GEN_SPI_IF = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = get_spi_if_enable
PARAMETER C_GEN_PLB_BUS_IF = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = get_plb_bus_enable
PARAMETER C_GEN_SIMPLE_IO = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = get_simple_io_enable

# openMAC
#PARAMETER C_PACKET_LOCATION = 0, DT = INTEGER, RANGE = (0:2), TYPE = NON_HDL, VALUES = ( 0 = "TX and RX into DPRAM", 1 = "TX into DPRAM and RX over PLB", 2 = "TX and RX over PLB" )
PARAMETER C_PACKET_LOCATION = 0, DT = INTEGER, RANGE = (0:1), TYPE = NON_HDL, VALUES = ( 0 = "TX and RX into DPRAM", 1 = "TX into DPRAM and RX over PLB" )
PARAMETER C_MAC_RX_BUFFERS = 16, DT = INTEGER, RANGE = (1:16), SYSLEVEL_UPDATE_VALUE_PROC = calc_mac_rx_buffers
PARAMETER C_TX_INT_PKT = FALSE, DT = BOOLEAN, VALUES = (FALSE = EXT, TRUE = BRAM), SYSLEVEL_UPDATE_VALUE_PROC = update_tx_packet_location
PARAMETER C_RX_INT_PKT = FALSE, DT = BOOLEAN, VALUES = (FALSE = EXT, TRUE = BRAM), SYSLEVEL_UPDATE_VALUE_PROC = update_rx_packet_location

PARAMETER C_USE_RMII = FALSE, DT = BOOLEAN, VALUES = (FALSE = MII, TRUE = RMII)
PARAMETER C_USE_2ND_PHY = TRUE, DT = BOOLEAN
PARAMETER C_NUM_SMI = 1, DT = INTEGER, RANGE = (1,2)
PARAMETER C_MAC_NUM_RPDO_USER = 3, DT = INTEGER,RANGE = (1:3), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 0)
PARAMETER C_MAC_NUM_TPDO_USER = 1, DT = INTEGER,RANGE = (1), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 0)
PARAMETER C_MAC_NUM_RX_BUFFER_USER = 4, DT = INTEGER, RANGE = (4:16), TYPE = NON_HDL, ISVALID = C_IP_CORE_MODE == 5
PARAMETER C_MAC_PKT_SIZE_TX_USER = 7000, DT = INTEGER, TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 5 && C_PACKET_LOCATION < 2)
PARAMETER C_INSTANCE_ODDR2 = FALSE, DT = BOOLEAN

# PDI
PARAMETER C_PDI_REVISION = 2, DT = INTEGER,RANGE = (1:255), TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)

PARAMETER C_PDI_NUM_RPDO_USER = 3, DT = INTEGER,RANGE = (1:3), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_RPDO_BUF_SIZE_USER = 50, DT = INTEGER, RANGE = (1:1500), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_NUM_TPDO_USER = 1, DT = INTEGER, TYPE = NON_HDL, RANGE = (1), ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_TPDO_BUF_SIZE_USER = 50, DT = INTEGER, RANGE = (1:1500), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_ASYNC_BUF_0_SIZE_USER = 50, DT = INTEGER, RANGE = (20:1500), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_ASYNC_BUF_1_SIZE_USER = 50, DT = INTEGER, RANGE = (0:1500), TYPE = NON_HDL, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)

PARAMETER C_PDI_GEN_ASYNC_BUF_0 = TRUE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = gen_async_0_buffer, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_ASYNC_BUF_0 = 50, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_async_0_buffer_size, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_GEN_ASYNC_BUF_1 = TRUE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = gen_async_1_buffer, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_ASYNC_BUF_1 = 50, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_async_1_buffer_size, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)

PARAMETER C_PDI_GEN_LED = false, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_GEN_SECOND_TIMER = true, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_GEN_TIME_SYNC = true, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = calc_second_time_sync_val, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)
PARAMETER C_PDI_GEN_EVENT = true, DT = BOOLEAN, IPLEVEL_DRC_PROC = drc_check_if_event_is_active, ISVALID = (C_IP_CORE_MODE == 1 || C_IP_CORE_MODE == 3 || C_IP_CORE_MODE == 4)

#global pdi and mac
PARAMETER C_NUM_RPDO = 3, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_rpdo_count
PARAMETER C_NUM_TPDO = 1, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_tpdo_count
PARAMETER C_RPDO_0_BUF_SIZE = 100, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_rpdo_0_buffer_size
PARAMETER C_RPDO_1_BUF_SIZE = 100, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_rpdo_1_buffer_size
PARAMETER C_RPDO_2_BUF_SIZE = 100, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_rpdo_2_buffer_size
PARAMETER C_TPDO_BUF_SIZE = 100, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_tpdo_buffer_size
PARAMETER C_MAC_PKT_SIZE = 1500, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_mac_packet_size
PARAMETER C_MAC_PKT_SIZE_LOG2 = 1500, DT = INTEGER, SYSLEVEL_UPDATE_VALUE_PROC = calc_mac_packet_size_log2

#debug
PARAMETER C_OBSERVER_ENABLE_USER = FALSE, TYPE = NON_HDL, DT = BOOLEAN, ISVALID = (C_PACKET_LOCATION != 0)
PARAMETER C_OBSERVER_ENABLE = FALSE, DT = BOOLEAN, SYSLEVEL_UPDATE_VALUE_PROC = calc_dma_observer_state

# Parallel interface
PARAMETER C_PAP_LOW_ACT = FALSE, DT = BOOLEAN, VALUES = (FALSE = "High Active", TRUE = "Low Active"), ISVALID = (C_IP_CORE_MODE == 1)
PARAMETER C_PAP_DATA_WIDTH = 8, DT = INTEGER,    RANGE = (8,16), ISVALID = (C_IP_CORE_MODE == 1)
PARAMETER C_PAP_BIG_END = FALSE, DT = BOOLEAN, VALUES = (FALSE = "Little Endian", TRUE = "Big Endian"), ISVALID = (C_IP_CORE_MODE == 1)
# SPI interface
PARAMETER C_SPI_CPOL = FALSE, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 3)
PARAMETER C_SPI_CPHA = FALSE, DT = BOOLEAN, ISVALID = (C_IP_CORE_MODE == 3)
PARAMETER C_SPI_BIG_END = FALSE, DT = BOOLEAN, VALUES = (FALSE = "Little Endian", TRUE = "Big Endian"), ISVALID = (C_IP_CORE_MODE == 3)
# Simple IO
PARAMETER C_PIO_VAL_LENGTH = 50, DT = INTEGER, ISVALID = (C_IP_CORE_MODE == 0)


### openMAC DMA
PARAMETER C_MAC_DMA_BURST_SIZE_RX = 32, DT = INTEGER, RANGE = (4,8,16,24,32,40,48,56,64), ISVALID = (C_PACKET_LOCATION != 0)
PARAMETER C_MAC_DMA_FIFO_SIZE_RX = 128, DT = INTEGER, RANGE = (C_MAC_DMA_BURST_SIZE_RX*2,C_MAC_DMA_BURST_SIZE_RX*3,C_MAC_DMA_BURST_SIZE_RX*4), ISVALID = (C_PACKET_LOCATION != 0)
PARAMETER C_MAC_DMA_BURST_SIZE_TX = 32, DT = INTEGER, RANGE = (4,8,16,24,32,40,48,56,64), ISVALID = (C_PACKET_LOCATION != 0 && C_PACKET_LOCATION != 1)
PARAMETER C_MAC_DMA_FIFO_SIZE_TX = 128, DT = INTEGER, RANGE = (C_MAC_DMA_BURST_SIZE_TX*2,C_MAC_DMA_BURST_SIZE_TX*3,C_MAC_DMA_BURST_SIZE_TX*4), ISVALID = (C_PACKET_LOCATION != 0 && C_PACKET_LOCATION != 1)
PARAMETER C_MAC_DMA_PLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = MAC_DMA, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_DMA_PLB_AWIDTH = 32, DT = INTEGER, BUS = MAC_DMA, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_DMA_PLB_DWIDTH = 32, DT = INTEGER, BUS = MAC_DMA, ASSIGNMENT = CONSTANT
### openMAC REG
PARAMETER C_MAC_REG_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = MAC_REG, ADDRESS = BASE, PAIR = C_MAC_REG_HIGHADDR, MIN_SIZE = 0x2000, ASSIGNMENT = REQUIRE
PARAMETER C_MAC_REG_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = MAC_REG, ADDRESS = HIGH, PAIR = C_MAC_REG_BASEADDR, ASSIGNMENT = REQUIRE
PARAMETER C_MAC_CMP_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = MAC_REG, ADDRESS = BASE, PAIR = C_MAC_CMP_HIGHADDR, MIN_SIZE = 0x10, ASSIGNMENT = REQUIRE
PARAMETER C_MAC_CMP_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = MAC_REG, ADDRESS = HIGH, PAIR = C_MAC_CMP_BASEADDR, ASSIGNMENT = REQUIRE
PARAMETER C_MAC_REG_PLB_DWIDTH = 32, DT = INTEGER, BUS = MAC_REG, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_REG_PLB_AWIDTH = 32, DT = INTEGER, BUS = MAC_REG, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_REG_Clk_FREQ_HZ = 50000000, DT = INTEGER, TYPE = NON_HDL, ASSIGNMENT = UPDATE, IPLEVEL_DRC_PROC = drc_check_mac_reg_clk_freq
PARAMETER C_MAC_REG_BUS2CORE_CLK_RATIO = 1, DT = INTEGER, RANGE = (1,2), SYSLEVEL_UPDATE_VALUE_PROC = calc_bus2core_clk_ratio
PARAMETER C_MAC_REG_PLB_NUM_MASTERS = 1, DT = INTEGER, BUS = MAC_REG, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_REG_PLB_MID_WIDTH = 1, DT = INTEGER, BUS = MAC_REG, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_REG_PLB_P2P = 0, DT = INTEGER, BUS = MAC_REG, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_REG_PLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = MAC_REG, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_REG_PLB_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = MAC_REG, ASSIGNMENT = CONSTANT
### openMAC PKT
PARAMETER C_MAC_PKT_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = MAC_PKT, ADDRESS = BASE, PAIR = C_MAC_PKT_HIGHADDR, MIN_SIZE = 0x10000, ASSIGNMENT = REQUIRE, IPLEVEL_DRC_PROC = drc_mac_pkt_base_addr, ISVALID = (C_PACKET_LOCATION != 2)
PARAMETER C_MAC_PKT_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = MAC_PKT, ADDRESS = HIGH, PAIR = C_MAC_PKT_BASEADDR, ASSIGNMENT = REQUIRE, IPLEVEL_DRC_PROC = drc_mac_pkt_high_addr, ISVALID = (C_PACKET_LOCATION != 2)
PARAMETER C_MAC_PKT_PLB_DWIDTH = 32, DT = INTEGER, BUS = MAC_PKT, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_PKT_PLB_AWIDTH = 32, DT = INTEGER, BUS = MAC_PKT, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_PKT_PLB_NUM_MASTERS = 1, DT = INTEGER, BUS = MAC_PKT, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_PKT_PLB_MID_WIDTH = 1, DT = INTEGER, BUS = MAC_PKT, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_PKT_PLB_P2P = 0, DT = INTEGER, BUS = MAC_PKT, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_PKT_PLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = MAC_PKT, ASSIGNMENT = CONSTANT
PARAMETER C_MAC_PKT_PLB_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = MAC_PKT, ASSIGNMENT = CONSTANT
### PDI PCP
PARAMETER C_PDI_PCP_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = PDI_PCP, ADDRESS = BASE, PAIR = C_PDI_PCP_HIGHADDR, MIN_SIZE = 0x8000, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
PARAMETER C_PDI_PCP_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = PDI_PCP, ADDRESS = HIGH, PAIR = C_PDI_PCP_BASEADDR, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
PARAMETER C_PDI_PCP_PLB_DWIDTH = 32, DT = INTEGER, BUS = PDI_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_PCP_PLB_AWIDTH = 32, DT = INTEGER, BUS = PDI_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_PCP_PLB_NUM_MASTERS = 1, DT = INTEGER, BUS = PDI_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_PCP_PLB_MID_WIDTH = 1, DT = INTEGER, BUS = PDI_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_PCP_PLB_P2P = 0, DT = INTEGER, BUS = PDI_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_PCP_PLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = PDI_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_PCP_PLB_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = PDI_PCP, ASSIGNMENT = CONSTANT
### PDI AP
PARAMETER C_PDI_AP_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = PDI_AP, ADDRESS = BASE, PAIR = C_PDI_AP_HIGHADDR, MIN_SIZE = 0x8000, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE == 4)
PARAMETER C_PDI_AP_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = PDI_AP, ADDRESS = HIGH, PAIR = C_PDI_AP_BASEADDR, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE == 4)
PARAMETER C_PDI_AP_PLB_DWIDTH = 32, DT = INTEGER, BUS = PDI_AP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_AP_PLB_AWIDTH = 32, DT = INTEGER, BUS = PDI_AP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_AP_PLB_NUM_MASTERS = 1, DT = INTEGER, BUS = PDI_AP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_AP_PLB_MID_WIDTH = 1, DT = INTEGER, BUS = PDI_AP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_AP_PLB_P2P = 0, DT = INTEGER, BUS = PDI_AP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_AP_PLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = PDI_AP, ASSIGNMENT = CONSTANT
PARAMETER C_PDI_AP_PLB_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = PDI_AP, ASSIGNMENT = CONSTANT
### SimpleIO
PARAMETER C_SMP_PCP_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = SMP_PCP, ADDRESS = BASE, PAIR = C_SMP_PCP_HIGHADDR, MIN_SIZE = 0x8, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE == 0)
PARAMETER C_SMP_PCP_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SMP_PCP, ADDRESS = HIGH, PAIR = C_SMP_PCP_BASEADDR, ASSIGNMENT = REQUIRE, ISVALID = (C_IP_CORE_MODE == 0)
PARAMETER C_SMP_PCP_PLB_DWIDTH = 32, DT = INTEGER, BUS = SMP_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_SMP_PCP_PLB_AWIDTH = 32, DT = INTEGER, BUS = SMP_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_SMP_PCP_PLB_NUM_MASTERS = 1, DT = INTEGER, BUS = SMP_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_SMP_PCP_PLB_MID_WIDTH = 1, DT = INTEGER, BUS = SMP_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_SMP_PCP_PLB_P2P = 0, DT = INTEGER, BUS = SMP_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_SMP_PCP_PLB_NATIVE_DWIDTH = 32, DT = INTEGER, BUS = SMP_PCP, ASSIGNMENT = CONSTANT
PARAMETER C_SMP_PCP_PLB_SUPPORT_BURSTS = 0, DT = INTEGER, BUS = SMP_PCP, ASSIGNMENT = CONSTANT


## Ports
PORT test_port = "", DIR = O, VEC = [255:0]
### Clk
PORT clk50 = "", DIR = I, SIGIS = CLK
PORT clk100 = "", DIR = I, SIGIS = CLK, ISVALID = (C_USE_RMII)
###
PORT phy_SMIDat = "", DIR = INOUT, THREE_STATE = TRUE, IO_IF = PHY, IO_IS = smi_dio, ISVALID = ((C_USE_2ND_PHY && C_NUM_SMI == 1) || !C_USE_2ND_PHY)
PORT phy_SMIClk = "", DIR = OUT, IO_IF = PHY, IO_IS = smi_clk, ISVALID = ((C_USE_2ND_PHY && C_NUM_SMI == 1) || !C_USE_2ND_PHY)
PORT phy_Rst_n = "", DIR = OUT, IO_IF = PHY, IO_IS = smi_rst, ISVALID = ((C_USE_2ND_PHY && C_NUM_SMI == 1) || !C_USE_2ND_PHY)
### PHY0
PORT phy0_SMIDat = "", DIR = INOUT, THREE_STATE = TRUE, IO_IF = PHY0, IO_IS = smi_dio, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2)
PORT phy0_SMIClk = "", DIR = OUT, IO_IF = PHY0, IO_IS = smi_clk, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2)
PORT phy0_Rst_n = "", DIR = OUT, IO_IF = PHY0, IO_IS = smi_rst, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2)
PORT phy0_link = "", DIR = IN, IO_IF = PHY0, IO_IS = phy_link
#### MII
PORT phyMii0_RxClk = "", DIR = IN, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_rxclk
PORT phyMii0_RxDat = "", DIR = IN, VEC = [3:0], ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_rxdat
PORT phyMii0_RxDv = "", DIR = IN, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_rxdv
PORT phyMii0_RxEr = "", DIR = IN, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_rxer
PORT phyMii0_TxClk = "", DIR = IN, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_txclk
PORT phyMii0_TxDat = "", DIR = OUT, VEC = [3:0], ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_txdat
PORT phyMii0_TxEn = "", DIR = OUT, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_txen
PORT phyMii0_TxEr = "", DIR = OUT, ISVALID = (!C_USE_RMII), IO_IF = PHY0, IO_IS = mii_txer
#### RMII
PORT phy0_clk = "", DIR = OUT, SIGIS = Clk, ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_clk
PORT phy0_RxDat = "", DIR = IN, VEC = [1:0], ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_rxdat
PORT phy0_RxDv = "", DIR = IN, ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_rxdv
PORT phy0_RxErr = "", DIR = IN, ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_rxer
PORT phy0_TxDat = "", DIR = OUT, VEC = [1:0], ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_txdat
PORT phy0_TxEn = "", DIR = OUT, ISVALID = (C_USE_RMII), IO_IF = PHY0, IO_IS = rmii_txen

### PHY1
PORT phy1_SMIDat = "", DIR = INOUT, THREE_STATE = TRUE, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2), IO_IF = PHY1, IO_IS = smi_dio
PORT phy1_SMIClk = "", DIR = OUT, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2), IO_IF = PHY1, IO_IS = smi_clk
PORT phy1_Rst_n = "", DIR = OUT, ISVALID = (C_USE_2ND_PHY && C_NUM_SMI == 2), IO_IF = PHY1, IO_IS = smi_rst
PORT phy1_link = "", DIR = IN, ISVALID = (C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = phy_link
#### MII
PORT phyMii1_RxClk = "", DIR = IN, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_rxclk
PORT phyMii1_RxDat = "", DIR = IN, VEC = [3:0], ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_rxdat
PORT phyMii1_RxDv = "", DIR = IN, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_rxdv
PORT phyMii1_RxEr = "", DIR = IN, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_rxer
PORT phyMii1_TxClk = "", DIR = IN, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_txclk
PORT phyMii1_TxDat = "", DIR = OUT, VEC = [3:0], ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_txdat
PORT phyMii1_TxEn = "", DIR = OUT, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_txen
PORT phyMii1_TxEr = "", DIR = OUT, ISVALID = (!C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = mii_txer
#### RMII
PORT phy1_clk = "", DIR = OUT, SIGIS = Clk, ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_clk
PORT phy1_RxDat = "", DIR = IN, VEC = [1:0], ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_rxdat
PORT phy1_RxDv = "", DIR = IN, ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_rxdv
PORT phy1_RxErr = "", DIR = IN, ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_rxer
PORT phy1_TxDat = "", DIR = OUT, VEC = [1:0], ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_txdat
PORT phy1_TxEn = "", DIR = OUT, ISVALID = (C_USE_RMII && C_USE_2ND_PHY), IO_IF = PHY1, IO_IS = rmii_txen

### Interrupts
PORT mac_irq = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT tcp_irq = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT ap_syncIrq = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
PORT ap_syncIrq_n = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_LOW, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
PORT ap_asyncIrq = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)
PORT ap_asyncIrq_n = "", DIR = OUT, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_LOW, ISVALID = (C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5)

### Portio
PORT pio_pconfig = "", DIR = IN, VEC = [3:0], ISVALID = (C_IP_CORE_MODE == 0), IO_IF = PORTIO
PORT pio_portinlatch = "", DIR = IN, VEC = [3:0], ISVALID = (C_IP_CORE_MODE == 0), IO_IF = PORTIO
PORT pio_portio = "", DIR = INOUT, VEC = [31:0], THREE_STATE = TRUE, ENABLE = MULTI, ISVALID = (C_IP_CORE_MODE == 0), IO_IF = PORTIO
PORT pio_portOutValid = "", DIR = OUT, VEC = [3:0], ISVALID = (C_IP_CORE_MODE == 0), IO_IF = PORTIO
PORT pio_operational = "", DIR = OUT, ISVALID = (C_IP_CORE_MODE == 0), IO_IF = PORTIO


### SPI
PORT spi_clk = "", DIR = IN, IO_IF = SPI, ISVALID = (C_IP_CORE_MODE == 3)
PORT spi_mosi = "", DIR = IN, IO_IF = SPI, ISVALID = (C_IP_CORE_MODE == 3)
PORT spi_miso = "", DIR = OUT, IO_IF = SPI, ISVALID = (C_IP_CORE_MODE == 3)
PORT spi_sel_n = "", DIR = IN, IO_IF = SPI, ISVALID = (C_IP_CORE_MODE == 3)


### Parallel Interface
PORT pap_cs = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == FALSE)
PORT pap_cs_n = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == TRUE)
PORT pap_rd = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == FALSE)
PORT pap_rd_n = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == TRUE)
PORT pap_wr = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == FALSE)
PORT pap_wr_n = "", DIR = IN, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == TRUE)
PORT pap_addr = "", DIR = IN, IO_IF = PAP, VEC = [15:0], ISVALID = C_IP_CORE_MODE == 1
PORT pap_data = "", DIR = INOUT, IO_IF = PAP, VEC = [C_PAP_DATA_WIDTH-1:0], THREE_STATE = TRUE, ISVALID = (C_IP_CORE_MODE == 1)
PORT pap_be = "", DIR = IN, IO_IF = PAP, VEC = [(C_PAP_DATA_WIDTH/8)-1:0], ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == FALSE && C_PAP_DATA_WIDTH > 8)
PORT pap_be_n = "", DIR = IN, IO_IF = PAP, VEC = [(C_PAP_DATA_WIDTH/8)-1:0], ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == TRUE && C_PAP_DATA_WIDTH > 8)
PORT pap_ack = "", DIR = OUT, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == FALSE)
PORT pap_ack_n = "", DIR = OUT, IO_IF = PAP, ISVALID = (C_IP_CORE_MODE == 1 && C_PAP_LOW_ACT == TRUE)
PORT pap_gpio = "", DIR = INOUT, IO_IF = PAP, VEC = [1:0], THREE_STATE = TRUE, ENABLE = MULTI, ISVALID = (C_IP_CORE_MODE == 1)

### LED
PORT led_error = "", DIR = OUT, IO_IF = LED, ISVALID = ((C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5) && (C_PDI_GEN_LED))
PORT led_status = "", DIR = OUT, IO_IF = LED, ISVALID = ((C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5) && (C_PDI_GEN_LED))
PORT led_phyLink = "", DIR = OUT, IO_IF = LED, VEC = [1:0], ISVALID = ((C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5) && (C_PDI_GEN_LED))
PORT led_phyAct = "", DIR = OUT, IO_IF = LED, VEC = [1:0], ISVALID = ((C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5) && (C_PDI_GEN_LED))
PORT led_opt = "", DIR = OUT, IO_IF = LED, VEC = [1:0], ISVALID = ((C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5) && (C_PDI_GEN_LED))
PORT led_gpo = "", DIR = OUT, IO_IF = LED, VEC = [7:0], ISVALID = ((C_IP_CORE_MODE > 0 && C_IP_CORE_MODE < 5) && (C_PDI_GEN_LED))

### openMAC DMA
PORT MAC_DMA_Clk = "", DIR = I, SIGIS = CLK, BUS = MAC_DMA
PORT MAC_DMA_Rst = MPLB_Rst, DIR = I, SIGIS = RST, BUS = MAC_DMA
#PORT MAC_DMA_error = "", DIR = O
PORT MAC_DMA_request = M_request, DIR = O, BUS = MAC_DMA
PORT MAC_DMA_priority = M_priority, DIR = O, VEC = [0:1], BUS = MAC_DMA
PORT MAC_DMA_busLock = M_busLock, DIR = O, BUS = MAC_DMA
PORT MAC_DMA_RNW = M_RNW, DIR = O, BUS = MAC_DMA
PORT MAC_DMA_BE = M_BE, DIR = O, VEC = [0:((C_MAC_DMA_PLB_DWIDTH/8)-1)], BUS = MAC_DMA
PORT MAC_DMA_MSize = M_MSize, DIR = O, VEC = [0:1], BUS = MAC_DMA
PORT MAC_DMA_size = M_size, DIR = O, VEC = [0:3], BUS = MAC_DMA
PORT MAC_DMA_type = M_type, DIR = O, VEC = [0:2], BUS = MAC_DMA
PORT MAC_DMA_TAttribute = M_TAttribute, DIR = O, VEC = [0:15], BUS = MAC_DMA
PORT MAC_DMA_lockErr = M_lockErr, DIR = O, BUS = MAC_DMA
PORT MAC_DMA_abort = M_abort, DIR = O, BUS = MAC_DMA
PORT MAC_DMA_UABus = M_UABus, DIR = O, VEC = [0:31], BUS = MAC_DMA
PORT MAC_DMA_ABus = M_ABus, DIR = O, VEC = [0:31], BUS = MAC_DMA
PORT MAC_DMA_wrDBus = M_wrDBus, DIR = O, VEC = [0:(C_MAC_DMA_PLB_DWIDTH-1)], BUS = MAC_DMA
PORT MAC_DMA_wrBurst = M_wrBurst, DIR = O, BUS = MAC_DMA
PORT MAC_DMA_rdBurst = M_rdBurst, DIR = O, BUS = MAC_DMA
PORT MAC_DMA_MAddrAck = PLB_MAddrAck, DIR = I, BUS = MAC_DMA
PORT MAC_DMA_MSSize = PLB_MSSize, DIR = I, VEC = [0:1], BUS = MAC_DMA
PORT MAC_DMA_MRearbitrate = PLB_MRearbitrate, DIR = I, BUS = MAC_DMA
PORT MAC_DMA_MTimeout = PLB_MTimeout, DIR = I, BUS = MAC_DMA
PORT MAC_DMA_MBusy = PLB_MBusy, DIR = I, BUS = MAC_DMA
PORT MAC_DMA_MRdErr = PLB_MRdErr, DIR = I, BUS = MAC_DMA
PORT MAC_DMA_MWrErr = PLB_MWrErr, DIR = I, BUS = MAC_DMA
PORT MAC_DMA_MIRQ = PLB_MIRQ, DIR = I, BUS = MAC_DMA
PORT MAC_DMA_MRdDBus = PLB_MRdDBus, DIR = I, VEC = [0:(C_MAC_DMA_PLB_DWIDTH-1)], BUS = MAC_DMA
PORT MAC_DMA_MRdWdAddr = PLB_MRdWdAddr, DIR = I, VEC = [0:3], BUS = MAC_DMA
PORT MAC_DMA_MRdDAck = PLB_MRdDAck, DIR = I, BUS = MAC_DMA
PORT MAC_DMA_MRdBTerm = PLB_MRdBTerm, DIR = I, BUS = MAC_DMA
PORT MAC_DMA_MWrDAck = PLB_MWrDAck, DIR = I, BUS = MAC_DMA
PORT MAC_DMA_MWrBTerm = PLB_MWrBTerm, DIR = I, BUS = MAC_DMA
### openMAC REG
PORT MAC_REG_Clk = "", DIR = I, SIGIS = CLK, BUS = MAC_REG
PORT MAC_REG_Rst = SPLB_Rst, DIR = I, SIGIS = RST, BUS = MAC_REG
PORT MAC_REG_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = MAC_REG
PORT MAC_REG_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = MAC_REG
PORT MAC_REG_PAValid = PLB_PAValid, DIR = I, BUS = MAC_REG
PORT MAC_REG_SAValid = PLB_SAValid, DIR = I, BUS = MAC_REG
PORT MAC_REG_rdPrim = PLB_rdPrim, DIR = I, BUS = MAC_REG
PORT MAC_REG_wrPrim = PLB_wrPrim, DIR = I, BUS = MAC_REG
PORT MAC_REG_masterID = PLB_masterID, DIR = I, VEC = [0:(C_MAC_REG_PLB_MID_WIDTH-1)], BUS = MAC_REG
PORT MAC_REG_abort = PLB_abort, DIR = I, BUS = MAC_REG
PORT MAC_REG_busLock = PLB_busLock, DIR = I, BUS = MAC_REG
PORT MAC_REG_RNW = PLB_RNW, DIR = I, BUS = MAC_REG
PORT MAC_REG_BE = PLB_BE, DIR = I, VEC = [0:((C_MAC_REG_PLB_DWIDTH/8)-1)], BUS = MAC_REG
PORT MAC_REG_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = MAC_REG
PORT MAC_REG_size = PLB_size, DIR = I, VEC = [0:3], BUS = MAC_REG
PORT MAC_REG_type = PLB_type, DIR = I, VEC = [0:2], BUS = MAC_REG
PORT MAC_REG_lockErr = PLB_lockErr, DIR = I, BUS = MAC_REG
PORT MAC_REG_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_MAC_REG_PLB_DWIDTH-1)], BUS = MAC_REG
PORT MAC_REG_wrBurst = PLB_wrBurst, DIR = I, BUS = MAC_REG
PORT MAC_REG_rdBurst = PLB_rdBurst, DIR = I, BUS = MAC_REG
PORT MAC_REG_wrPendReq = PLB_wrPendReq, DIR = I, BUS = MAC_REG
PORT MAC_REG_rdPendReq = PLB_rdPendReq, DIR = I, BUS = MAC_REG
PORT MAC_REG_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = MAC_REG
PORT MAC_REG_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = MAC_REG
PORT MAC_REG_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = MAC_REG
PORT MAC_REG_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = MAC_REG
PORT MAC_REG_addrAck = Sl_addrAck, DIR = O, BUS = MAC_REG
PORT MAC_REG_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = MAC_REG
PORT MAC_REG_wait = Sl_wait, DIR = O, BUS = MAC_REG
PORT MAC_REG_rearbitrate = Sl_rearbitrate, DIR = O, BUS = MAC_REG
PORT MAC_REG_wrDAck = Sl_wrDAck, DIR = O, BUS = MAC_REG
PORT MAC_REG_wrComp = Sl_wrComp, DIR = O, BUS = MAC_REG
PORT MAC_REG_wrBTerm = Sl_wrBTerm, DIR = O, BUS = MAC_REG
PORT MAC_REG_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_MAC_REG_PLB_DWIDTH-1)], BUS = MAC_REG
PORT MAC_REG_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = MAC_REG
PORT MAC_REG_rdDAck = Sl_rdDAck, DIR = O, BUS = MAC_REG
PORT MAC_REG_rdComp = Sl_rdComp, DIR = O, BUS = MAC_REG
PORT MAC_REG_rdBTerm = Sl_rdBTerm, DIR = O, BUS = MAC_REG
PORT MAC_REG_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_MAC_REG_PLB_NUM_MASTERS-1)], BUS = MAC_REG
PORT MAC_REG_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_MAC_REG_PLB_NUM_MASTERS-1)], BUS = MAC_REG
PORT MAC_REG_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_MAC_REG_PLB_NUM_MASTERS-1)], BUS = MAC_REG
PORT MAC_REG_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_MAC_REG_PLB_NUM_MASTERS-1)], BUS = MAC_REG
### openMAC PKT
PORT MAC_PKT_Clk = "", DIR = I, SIGIS = CLK, BUS = MAC_PKT
PORT MAC_PKT_Rst = SPLB_Rst, DIR = I, SIGIS = RST, BUS = MAC_PKT
PORT MAC_PKT_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = MAC_PKT
PORT MAC_PKT_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = MAC_PKT
PORT MAC_PKT_PAValid = PLB_PAValid, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_SAValid = PLB_SAValid, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_rdPrim = PLB_rdPrim, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_wrPrim = PLB_wrPrim, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_masterID = PLB_masterID, DIR = I, VEC = [0:(C_MAC_PKT_PLB_MID_WIDTH-1)], BUS = MAC_PKT
PORT MAC_PKT_abort = PLB_abort, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_busLock = PLB_busLock, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_RNW = PLB_RNW, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_BE = PLB_BE, DIR = I, VEC = [0:((C_MAC_PKT_PLB_DWIDTH/8)-1)], BUS = MAC_PKT
PORT MAC_PKT_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = MAC_PKT
PORT MAC_PKT_size = PLB_size, DIR = I, VEC = [0:3], BUS = MAC_PKT
PORT MAC_PKT_type = PLB_type, DIR = I, VEC = [0:2], BUS = MAC_PKT
PORT MAC_PKT_lockErr = PLB_lockErr, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_MAC_PKT_PLB_DWIDTH-1)], BUS = MAC_PKT
PORT MAC_PKT_wrBurst = PLB_wrBurst, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_rdBurst = PLB_rdBurst, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_wrPendReq = PLB_wrPendReq, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_rdPendReq = PLB_rdPendReq, DIR = I, BUS = MAC_PKT
PORT MAC_PKT_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = MAC_PKT
PORT MAC_PKT_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = MAC_PKT
PORT MAC_PKT_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = MAC_PKT
PORT MAC_PKT_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = MAC_PKT
PORT MAC_PKT_addrAck = Sl_addrAck, DIR = O, BUS = MAC_PKT
PORT MAC_PKT_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = MAC_PKT
PORT MAC_PKT_wait = Sl_wait, DIR = O, BUS = MAC_PKT
PORT MAC_PKT_rearbitrate = Sl_rearbitrate, DIR = O, BUS = MAC_PKT
PORT MAC_PKT_wrDAck = Sl_wrDAck, DIR = O, BUS = MAC_PKT
PORT MAC_PKT_wrComp = Sl_wrComp, DIR = O, BUS = MAC_PKT
PORT MAC_PKT_wrBTerm = Sl_wrBTerm, DIR = O, BUS = MAC_PKT
PORT MAC_PKT_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_MAC_PKT_PLB_DWIDTH-1)], BUS = MAC_PKT
PORT MAC_PKT_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = MAC_PKT
PORT MAC_PKT_rdDAck = Sl_rdDAck, DIR = O, BUS = MAC_PKT
PORT MAC_PKT_rdComp = Sl_rdComp, DIR = O, BUS = MAC_PKT
PORT MAC_PKT_rdBTerm = Sl_rdBTerm, DIR = O, BUS = MAC_PKT
PORT MAC_PKT_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_MAC_PKT_PLB_NUM_MASTERS-1)], BUS = MAC_PKT
PORT MAC_PKT_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_MAC_PKT_PLB_NUM_MASTERS-1)], BUS = MAC_PKT
PORT MAC_PKT_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_MAC_PKT_PLB_NUM_MASTERS-1)], BUS = MAC_PKT
PORT MAC_PKT_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_MAC_PKT_PLB_NUM_MASTERS-1)], BUS = MAC_PKT
### PDI PCP
PORT PDI_PCP_Clk = "", DIR = I, SIGIS = CLK, BUS = PDI_PCP
PORT PDI_PCP_Rst = SPLB_Rst, DIR = I, SIGIS = RST, BUS = PDI_PCP
PORT PDI_PCP_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = PDI_PCP
PORT PDI_PCP_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = PDI_PCP
PORT PDI_PCP_PAValid = PLB_PAValid, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_SAValid = PLB_SAValid, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_rdPrim = PLB_rdPrim, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_wrPrim = PLB_wrPrim, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_masterID = PLB_masterID, DIR = I, VEC = [0:(C_PDI_PCP_PLB_MID_WIDTH-1)], BUS = PDI_PCP
PORT PDI_PCP_abort = PLB_abort, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_busLock = PLB_busLock, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_RNW = PLB_RNW, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_BE = PLB_BE, DIR = I, VEC = [0:((C_PDI_PCP_PLB_DWIDTH/8)-1)], BUS = PDI_PCP
PORT PDI_PCP_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = PDI_PCP
PORT PDI_PCP_size = PLB_size, DIR = I, VEC = [0:3], BUS = PDI_PCP
PORT PDI_PCP_type = PLB_type, DIR = I, VEC = [0:2], BUS = PDI_PCP
PORT PDI_PCP_lockErr = PLB_lockErr, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_PDI_PCP_PLB_DWIDTH-1)], BUS = PDI_PCP
PORT PDI_PCP_wrBurst = PLB_wrBurst, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_rdBurst = PLB_rdBurst, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_wrPendReq = PLB_wrPendReq, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_rdPendReq = PLB_rdPendReq, DIR = I, BUS = PDI_PCP
PORT PDI_PCP_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = PDI_PCP
PORT PDI_PCP_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = PDI_PCP
PORT PDI_PCP_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = PDI_PCP
PORT PDI_PCP_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = PDI_PCP
PORT PDI_PCP_addrAck = Sl_addrAck, DIR = O, BUS = PDI_PCP
PORT PDI_PCP_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = PDI_PCP
PORT PDI_PCP_wait = Sl_wait, DIR = O, BUS = PDI_PCP
PORT PDI_PCP_rearbitrate = Sl_rearbitrate, DIR = O, BUS = PDI_PCP
PORT PDI_PCP_wrDAck = Sl_wrDAck, DIR = O, BUS = PDI_PCP
PORT PDI_PCP_wrComp = Sl_wrComp, DIR = O, BUS = PDI_PCP
PORT PDI_PCP_wrBTerm = Sl_wrBTerm, DIR = O, BUS = PDI_PCP
PORT PDI_PCP_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_PDI_PCP_PLB_DWIDTH-1)], BUS = PDI_PCP
PORT PDI_PCP_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = PDI_PCP
PORT PDI_PCP_rdDAck = Sl_rdDAck, DIR = O, BUS = PDI_PCP
PORT PDI_PCP_rdComp = Sl_rdComp, DIR = O, BUS = PDI_PCP
PORT PDI_PCP_rdBTerm = Sl_rdBTerm, DIR = O, BUS = PDI_PCP
PORT PDI_PCP_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_PDI_PCP_PLB_NUM_MASTERS-1)], BUS = PDI_PCP
PORT PDI_PCP_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_PDI_PCP_PLB_NUM_MASTERS-1)], BUS = PDI_PCP
PORT PDI_PCP_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_PDI_PCP_PLB_NUM_MASTERS-1)], BUS = PDI_PCP
PORT PDI_PCP_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_PDI_PCP_PLB_NUM_MASTERS-1)], BUS = PDI_PCP
### PDI PCP
PORT PDI_AP_Clk = "", DIR = I, SIGIS = CLK, BUS = PDI_AP
PORT PDI_AP_Rst = SPLB_Rst, DIR = I, SIGIS = RST, BUS = PDI_AP
PORT PDI_AP_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = PDI_AP
PORT PDI_AP_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = PDI_AP
PORT PDI_AP_PAValid = PLB_PAValid, DIR = I, BUS = PDI_AP
PORT PDI_AP_SAValid = PLB_SAValid, DIR = I, BUS = PDI_AP
PORT PDI_AP_rdPrim = PLB_rdPrim, DIR = I, BUS = PDI_AP
PORT PDI_AP_wrPrim = PLB_wrPrim, DIR = I, BUS = PDI_AP
PORT PDI_AP_masterID = PLB_masterID, DIR = I, VEC = [0:(C_PDI_AP_PLB_MID_WIDTH-1)], BUS = PDI_AP
PORT PDI_AP_abort = PLB_abort, DIR = I, BUS = PDI_AP
PORT PDI_AP_busLock = PLB_busLock, DIR = I, BUS = PDI_AP
PORT PDI_AP_RNW = PLB_RNW, DIR = I, BUS = PDI_AP
PORT PDI_AP_BE = PLB_BE, DIR = I, VEC = [0:((C_PDI_AP_PLB_DWIDTH/8)-1)], BUS = PDI_AP
PORT PDI_AP_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = PDI_AP
PORT PDI_AP_size = PLB_size, DIR = I, VEC = [0:3], BUS = PDI_AP
PORT PDI_AP_type = PLB_type, DIR = I, VEC = [0:2], BUS = PDI_AP
PORT PDI_AP_lockErr = PLB_lockErr, DIR = I, BUS = PDI_AP
PORT PDI_AP_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_PDI_AP_PLB_DWIDTH-1)], BUS = PDI_AP
PORT PDI_AP_wrBurst = PLB_wrBurst, DIR = I, BUS = PDI_AP
PORT PDI_AP_rdBurst = PLB_rdBurst, DIR = I, BUS = PDI_AP
PORT PDI_AP_wrPendReq = PLB_wrPendReq, DIR = I, BUS = PDI_AP
PORT PDI_AP_rdPendReq = PLB_rdPendReq, DIR = I, BUS = PDI_AP
PORT PDI_AP_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = PDI_AP
PORT PDI_AP_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = PDI_AP
PORT PDI_AP_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = PDI_AP
PORT PDI_AP_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = PDI_AP
PORT PDI_AP_addrAck = Sl_addrAck, DIR = O, BUS = PDI_AP
PORT PDI_AP_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = PDI_AP
PORT PDI_AP_wait = Sl_wait, DIR = O, BUS = PDI_AP
PORT PDI_AP_rearbitrate = Sl_rearbitrate, DIR = O, BUS = PDI_AP
PORT PDI_AP_wrDAck = Sl_wrDAck, DIR = O, BUS = PDI_AP
PORT PDI_AP_wrComp = Sl_wrComp, DIR = O, BUS = PDI_AP
PORT PDI_AP_wrBTerm = Sl_wrBTerm, DIR = O, BUS = PDI_AP
PORT PDI_AP_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_PDI_AP_PLB_DWIDTH-1)], BUS = PDI_AP
PORT PDI_AP_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = PDI_AP
PORT PDI_AP_rdDAck = Sl_rdDAck, DIR = O, BUS = PDI_AP
PORT PDI_AP_rdComp = Sl_rdComp, DIR = O, BUS = PDI_AP
PORT PDI_AP_rdBTerm = Sl_rdBTerm, DIR = O, BUS = PDI_AP
PORT PDI_AP_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_PDI_AP_PLB_NUM_MASTERS-1)], BUS = PDI_AP
PORT PDI_AP_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_PDI_AP_PLB_NUM_MASTERS-1)], BUS = PDI_AP
PORT PDI_AP_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_PDI_AP_PLB_NUM_MASTERS-1)], BUS = PDI_AP
PORT PDI_AP_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_PDI_AP_PLB_NUM_MASTERS-1)], BUS = PDI_AP
### SimpleIO PCP
PORT SMP_PCP_Clk = "", DIR = I, SIGIS = CLK, BUS = SMP_PCP
PORT SMP_PCP_Rst = SPLB_Rst, DIR = I, SIGIS = RST, BUS = SMP_PCP
PORT SMP_PCP_ABus = PLB_ABus, DIR = I, VEC = [0:31], BUS = SMP_PCP
PORT SMP_PCP_UABus = PLB_UABus, DIR = I, VEC = [0:31], BUS = SMP_PCP
PORT SMP_PCP_PAValid = PLB_PAValid, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_SAValid = PLB_SAValid, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_rdPrim = PLB_rdPrim, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_wrPrim = PLB_wrPrim, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_masterID = PLB_masterID, DIR = I, VEC = [0:(C_SMP_PCP_PLB_MID_WIDTH-1)], BUS = SMP_PCP
PORT SMP_PCP_abort = PLB_abort, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_busLock = PLB_busLock, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_RNW = PLB_RNW, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_BE = PLB_BE, DIR = I, VEC = [0:((C_SMP_PCP_PLB_DWIDTH/8)-1)], BUS = SMP_PCP
PORT SMP_PCP_MSize = PLB_MSize, DIR = I, VEC = [0:1], BUS = SMP_PCP
PORT SMP_PCP_size = PLB_size, DIR = I, VEC = [0:3], BUS = SMP_PCP
PORT SMP_PCP_type = PLB_type, DIR = I, VEC = [0:2], BUS = SMP_PCP
PORT SMP_PCP_lockErr = PLB_lockErr, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_wrDBus = PLB_wrDBus, DIR = I, VEC = [0:(C_SMP_PCP_PLB_DWIDTH-1)], BUS = SMP_PCP
PORT SMP_PCP_wrBurst = PLB_wrBurst, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_rdBurst = PLB_rdBurst, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_wrPendReq = PLB_wrPendReq, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_rdPendReq = PLB_rdPendReq, DIR = I, BUS = SMP_PCP
PORT SMP_PCP_wrPendPri = PLB_wrPendPri, DIR = I, VEC = [0:1], BUS = SMP_PCP
PORT SMP_PCP_rdPendPri = PLB_rdPendPri, DIR = I, VEC = [0:1], BUS = SMP_PCP
PORT SMP_PCP_reqPri = PLB_reqPri, DIR = I, VEC = [0:1], BUS = SMP_PCP
PORT SMP_PCP_TAttribute = PLB_TAttribute, DIR = I, VEC = [0:15], BUS = SMP_PCP
PORT SMP_PCP_addrAck = Sl_addrAck, DIR = O, BUS = SMP_PCP
PORT SMP_PCP_SSize = Sl_SSize, DIR = O, VEC = [0:1], BUS = SMP_PCP
PORT SMP_PCP_wait = Sl_wait, DIR = O, BUS = SMP_PCP
PORT SMP_PCP_rearbitrate = Sl_rearbitrate, DIR = O, BUS = SMP_PCP
PORT SMP_PCP_wrDAck = Sl_wrDAck, DIR = O, BUS = SMP_PCP
PORT SMP_PCP_wrComp = Sl_wrComp, DIR = O, BUS = SMP_PCP
PORT SMP_PCP_wrBTerm = Sl_wrBTerm, DIR = O, BUS = SMP_PCP
PORT SMP_PCP_rdDBus = Sl_rdDBus, DIR = O, VEC = [0:(C_SMP_PCP_PLB_DWIDTH-1)], BUS = SMP_PCP
PORT SMP_PCP_rdWdAddr = Sl_rdWdAddr, DIR = O, VEC = [0:3], BUS = SMP_PCP
PORT SMP_PCP_rdDAck = Sl_rdDAck, DIR = O, BUS = SMP_PCP
PORT SMP_PCP_rdComp = Sl_rdComp, DIR = O, BUS = SMP_PCP
PORT SMP_PCP_rdBTerm = Sl_rdBTerm, DIR = O, BUS = SMP_PCP
PORT SMP_PCP_MBusy = Sl_MBusy, DIR = O, VEC = [0:(C_SMP_PCP_PLB_NUM_MASTERS-1)], BUS = SMP_PCP
PORT SMP_PCP_MWrErr = Sl_MWrErr, DIR = O, VEC = [0:(C_SMP_PCP_PLB_NUM_MASTERS-1)], BUS = SMP_PCP
PORT SMP_PCP_MRdErr = Sl_MRdErr, DIR = O, VEC = [0:(C_SMP_PCP_PLB_NUM_MASTERS-1)], BUS = SMP_PCP
PORT SMP_PCP_MIRQ = Sl_MIRQ, DIR = O, VEC = [0:(C_SMP_PCP_PLB_NUM_MASTERS-1)], BUS = SMP_PCP
END
