#!/bin/bash
#
# This script creates the standard newlibc/hal Board Support Package (BSP).

BSP_TYPE=hal
BSP_DIR=.
NIOS2_BSP_ARGS="--set hal.sys_clk_timer system_timer"
# --set hal.make.bsp_cflags_debug none
TC_I_MEM=tc_i_mem_pcp

#NIOS2_BSP_ARGS="--set hal.max_file_descriptors 4 --set hal.enable_small_c_library true --set hal.sys_clk_timer none --set hal.timestamp_timer none --set hal.enable_exit false --set hal.enable_c_plus_plus false --set hal.enable_lightweight_device_driver_api true --set hal.enable_clean_exit false --set hal.enable_sim_optimize false --set hal.enable_reduced_device_drivers true  --set hal.make.bsp_cflags_optimization '-Os'"

if [ -z "$SOPC_DIR" ]; then
SOPC_DIR=../../../../EBV_DBC3C40/design_nios2_openmac/
fi

# process arguments
SKIP_MAKE=
DEBUG=
while [ $# -gt 0 ]
do
  case "$1" in
      # Don't run make if create-this-app script is called with --no-make arg
      --no-make)
          SKIP_MAKE=1
          ;;
      --rebuild)
          rm -f ./public.mk ./settings.bsp
          ;;
      --debug)
          DEBUG=1
          ;;
      *)
          NIOS2_BSP_ARGS="$NIOS2_BSP_ARGS $1"
          ;;
  esac
  shift
done

if [ -z "$DEBUG" ]; then
    # release build: increase opt level, disable prints
    NIOS2_BSP_ARGS="${NIOS2_BSP_ARGS} --set hal.make.bsp_cflags_optimization -O2 --set hal.stdout none --set hal.stderr none"
fi

# Run nios2-bsp utility to create a hal BSP in this directory
# for the system with a .sopc file in $SOPC_DIR.
cmd="nios2-bsp $BSP_TYPE $BSP_DIR $SOPC_DIR $NIOS2_BSP_ARGS"

echo "create-this-bsp: Running \"$cmd\""
$cmd || {
    echo "$cmd failed"
    exit 1
}

# Add memory section for TCM
nios2-bsp-update-settings --settings $BSP_DIR/settings.bsp --cmd add_section_mapping .tc_i_mem_pcp $TC_I_MEM
nios2-bsp-generate-files --settings $BSP_DIR/settings.bsp --bsp-dir $BSP_DIR

if [ -z "$SKIP_MAKE" ]; then
	echo "create-this-bsp: Running make"
	make
fi
