openPOWERLINK on Linux x86
==========================

1 Introduction
--------------
  This file contains documentation for the openPOWERLINK stack on Linux x86.
  The openPOWERLINK stack for Linux x86 is available in two different
  versions:
  - as Linux userspace library
  - as Linux kernel module


2 Requirements
--------------
2.1 POWERLINK network
  - POWERLINK network with controlled nodes (CN)
        * openPOWERLINK controlled nodes, e.g. Altera-based FPGA evaluation boards
        * B&R POWERLINK controlled nodes
        * other POWERLINK controlled nodes

2.2 Network Controller
  One of the following network controllers is required to run openPOWERLINK on
  Linux x86.

  - Network controller card with Intel 82573L (or compatible) 1GBit Ethernet chip
    For example:
    - B&R APC 810 Industrial PC on-board network chip (tested)

  - Network controller card with Realtek RTL8139 Rev C or D chip
    For example:
    - PCI network cards:
      * Zyxel FN312 (tested)
      * Netgear FA311 v2 Rev-D1 (tested)
      * D-Link DFE-528TX
      * LevelOne FNC-0109TX
      * Typhoon Speednet Card 10/100 PCI (P/N 70035)
      * Longshine LCS-8038TX-R7
    - Cardbus network cards (PCMCIA):
      * Longshine LCS-8539TXR
      * Micronet SP160T V3
      * Micronet SP160TA V3

  - Network controller card with Intel 8255x 100MBit Ethernet chip
    For example:
    - B&R APC 620 Industrial PC on-board network chip (tested)
    - Intel Pro 100 82557/8/9/1 Ethernet Interface card (tested)

  - Standard Linux network controller through libpcap library
    (for user-space stack version)

2.3 Linux Kernel
   - Linux kernel version 2.6.23 or later (last tested version 2.6.33)
     with CONFIG_HIGH_RES_TIMERS enabled
     * this needs ACPI support, maybe you need to append "highres=on" or
       "acpi=force" to kernel command line for older BIOSes)
     * check /proc/timer_list if .hres_active is 1
       $ cat /proc/timer_list | grep 'hres_active'

2.3.1 Real-Time Kernel

   For best performance and minimal jitter on the POWERLINK cycle a real-time
   Linux kernel is recommended. The RT-Preempt patch maintaind by Ingo Molnar
   provides the necessary real-time extensions (https://rt.wiki.kernel.org).

   Thread Priorities
   If using a real-time kernel, the real-time priorities of the necessary
   threads must be adjusted for deterministic POWERLINK behaviour.
   If you are using the kernel based stack, the EplLoad script coming along
   with the stack automatically carries out the required priority changes.
   For the userspace stack, a script setting the priorities is provided in
   Examples/X86/Linux/gnu/tools/set_prio. It increases the thread priorities of
   the high resolution timer and of the Ethernet IRQ threads.

2.4 Libraries and Tools

2.4.1 CMake
   For building the openPOWERLINK stack and demo applications the Open Source
   cross-platform build tool CMake is used (http://www.cmake.org). CMake
   version V2.6 or higher is required.

2.4.2 libpcap library
  In order to use the userspace POWERLINK stack the libpcap library is needed
  to access the Ethernet interface.

2.4.3 QT4 development tools
  If you want to build the QT demo application the QT4 development tools must
  be installed on the system.

2.4.4 openCONFIGURATOR
  For configuration of your POWERLINK network the Open Source configuration
  tool openCONFIGURATOR should be used. The tool is available as SourceForge
  project. (http://sourceforge.net/projects/openconf/)

  The openCONFIGURATOR projects used by the demo examples are found in the
  directory: CfmProjects.

  openCONFIGURATOR creates two file which are used by the openPOWERLINK stack
  and application:
  * xap.h       The header file contains the structure definition for your
                process image. It depends on the available data field of the
                CNs used in your configuration.

  * mnobd.cdc   This file is used to configure the MN stack. It includes all
                configuration data of the CNs and the network mapping
				information. CN configuration is handled by the configuration
				manager (CFM) module of the MN.


3 openPOWERLINK Stack
---------------------
  The openPOWERLINK stack for Linux x86 is available in two different
  versions:
  - kernel module
  - userspace library

3.1 Linux kernel-based stack
  
  The openPOWERLINK stack may be implemented as Linux kernel module. This
  solution provides the best performance, but is limited to the available
  openPOWERLINK network drivers.

  The kernel based stack is located in:
  Examples/X86/Linux/gnu/powerlink_kernel_module

3.2 Linux userspace stack
  The Linux userspace implementation of the openPOWERLINK stack provides all
  functions for a software based POWERLINK solution running as Linux userspace
  application. The stack uses the libpcap library for accessing the network
  interface and is therefore totally independant of the used network card and
  driver.

  The userspace stack is located in: 
  Examples/X86/Linux/gnu/powerlink_user_lib

4 Tools
-------
  There are some shellscripts used for loading POWERLINK modules, setting
  thread priorities etc. 
  
  These tools are located in:
  Examples/X86/Linux/gnu/tools

5 Demo applications
-------------------
  There are several demo applications available. The POWERLINK demo applications
  are able to visualize the digital inputs of POWERLINK controlled nodes and are
  driving a running light on the CNs digital outputs.

5.1 Kernel demo
  The kernel demo is a simple demo application running together with the stack
  in kernel mode.
  
  It is located in:
  Examples/X86/Linux/gnu/demo_kernel

5.2 QT demo with process image
  This QT demo implements a POWERLINK managing node (MN) using the configuration
  manager (CFM) to initialize the controlled nodes. It uses a network configuration
  created with the openCONFIGURATOR tool. This demo can be used either with
  the kernel based stack or with the userspace stack.
  
  It is found in: 
  Examples/X86/Generic/demo_process_image_qt

5.3 Console demo with process image
  This demo also implements a POWERLINK MN with CFM. It is implemented as
  console application and is intended to machines where no graphical user
  interface is available. This demo can be used either with the kernel-based
  stack or with the userspace stack.
  
  It is located in: 
  Examples/X86/Generic/demo_process_image_console 

6 Building
----------

6.1 CMake
  For building openPOWELRINK on Linux the build utility CMake
  (http://www.cmake.org/) is used. CMake controls the software
  compilation process using simple platform and compiler independent
  configuration files. Depending on the architecture different build
  files can be created. On Linux CMake may create:
  * Unix Makefiles (tested)
  * Eclipse CDT4 - Unix Makefiles
  * Kdevelop3 - Unix Makefiles
  * CodeBlocks - Unix Makefiles

6.2 Configuration
  The configuration of different build options of the openPOWERLINK stack will
  be done through the cmake interface.

  There are three possible ways for configuring your build options
  * cmake-gui
    This is the most comfortable way for configuring the build options. cmake-gui
    is a graphical user interface for CMake.
  * ccmake
    ccmake is a curses based user interface for cmake.
  * cmake -i
    If cmake is called with option -i you can interactively select your build
    options.

  The following build configuration options are available:

  CFG_DEBUG_LVL         Debug level to be used for openPOWERLINK debugging
                        functions.

  CFG_KERNEL_DIR        The directory where the kernel sources used for building
                        the kernel modules are located. If it is not set the
						sources of the running kernel will be used:
                        /lib/modules/$(shell uname -r)/build

  CFG_KERNEL_STACK      Determines whether kernel stack or usermode stack are
                        compiled. If enabled, kernel stack will be compiled.

  CFG_POWERLINK_CFM     If enabled, the POWERLINK stack will be compiled with
                        configuration manager (CFM). The configuration manager
                        is used to configure the CNs on the network.
                        (For additional information on the CFM see chapter 6.7
                        of EPSG Draft Standard 301, Ethernet POWERLINK,
                        Communication Profile Specification)

                        CFM must be enabled in order to use the process image
                        based demos.

  CFG_POWERLINK_EDRV    Selects the Ethernet driver used for the kernel based
                        stack and demos. Valid options are:
                        8139:   Realtek 8139 based network interface cards
                        82573:  Intel 82573 based network interface cards

  CFG_POWERLINK_PROCESS_IMAGE
                        If enabled, the process image functions are compiled
                        into the stack. Instead of using single variables and
                        linking them to the object dictionary a whole process
                        image could be mapped. Process images are required if
                        configurations created by openCONFIGURATOR should be
                        used. openCONFIGURATOR provides the header file xap.h 
                        which defines the structure of the process image. It
                        contains all synchronous data fields supported by the
                        configured CNs.

                        Process images must be enabled for using the process
                        image demo applications. The kernel based demos and
                        the standard QT demo do not use process images!                                                                 

  CFG_X86_LINUX_DEMO_KERNEL
                        If enabled the kernel demo will be compiled.
                        It cannot be used if CFG_POWERLINK_PROCESS_IMAGE is
                        enabled!

  CFG_X86_LINUX_DEMO_PROCESS_IMAGE_CONSOLE
                        If enabled the process image based console application
                        will be compiled. It can be used either with the kernel
                        stack or with the userspace stack.
						
                        Requires: CFG_POWERLINK_CFM, CFG_POWERLINK_PROCESS_IMAGE

  CFG_X86_LINUX_DEMO_PROCESS_IMAGE_QT
                        If enabled the process image based QT application
                        will be compiled. It can be used either with the kernel
                        stack or with the userspace stack.

                        Requires: CFG_POWERLINK_CFM, CFG_POWERLINK_PROCESS_IMAGE

  CMAKE_INSTALL_PREFIX  Specifies the installation directory where your files
                        will be installed. Default directory is:
                        ${CMAKE_BUILD_DIR}/bin

  CMAKE_BUILD_TYPE      Specifies your build type.
                        Valid build types are: Debug,Release
                        If the build type debug is specified, the code is compiled
                        with debugging options.

6.3 Out-of-Source Builds
  CMake support out-of-source builds. Therefore, all generated files are located
  in a seperate build directory which keeps your sources clean. It is recommended
  to use a separate build directory for building the openPOWERLINK stack and the 
  demo applications.

6.4 Build Instructions
  Follow the steps below to build the stack and demo applications:

  1. Creating the build directory
     To separate the build files from the source code, a separate directory shall
	 be created, e.g. a directory called 'build' in the openPOWERLINK root:
     > cd openPOWERLINK
     > mkdir build

  2. Entering the build directory and executing cmake
     CMake has to be executed in the build directory with the path to the
     source directory as parameter.
     > cd build
     > cmake-gui .. (cmake -i .., ccmake ..)

     If using the cmake-gui, the build options are selected in the GUI. After
	 setting the desired options press "Configure". New options might appear
	 according to the current selection. New options will be marked in red. 
	 Further configuration settings may be changed and accepted by pressing
	 "Configure" again. If there are no red-marked options, "Generate" writes
	 the build files (Unix Makefiles).

  3. Building
     No we can build all necessary software modules by calling
     > make

  4. Installation
     To install the compiled files to a single directory, type:
     > make install

     The target files will be installed in the configured installation
     directory. There, the stack and demos can be started.


7. Running POWERLINK
--------------------

7.1  Starting kernel modules
  To start the POWERLINK kernel modules, the scripts EplLoad and EplUnload are
  used. The scripts will be installed in the installation directory. Additionally
  to inserting the kernel module they adjust priorities and unbind the network
  device from the standard driver. This allows the usage of the Ethernet card by
  openPOWERLINK.
  It is recommended to use the scripts to start openPOWERLINK.

  For example:
  Start the kernel stack using the Intel 82573 network controller with a
  POWERLINK network configuration stored in mnobd.cdc file.

  > cd bin
  > sudo ./EplLoad -c mnobd.cdc powerlink82573.ko

  To unload the kernel module:
  > cd bin
  > sudo ./EplUnload powerlink82573.ko

7.2 Starting the demo application

7.2.1 Demo uses kernel stack
  If the demo application is configured to use the kernel stack you could simply
  start it:

  > cd bin
  > ./demo_pi_qt

7.2.2 Demo uses userspace stack
  If the demo application is configured and linked with the userspace stack you
  must have root access and ensure that the network configuration mnobd.cdc is
  available in the current directory:

  > cd bin
  > sudo ./demo_pi_qt

  If you are using a real-time kernel you should adjust thread priorities using
  the delivered script set_prio before starting the application. To be able to
  increase the priority of the right ethernet interrupt thread, you have to
  specifcy the used ethernet interface.

  > cd bin
  > sudo ./set_prio eth1


8. Troubleshooting
------------------

  - The userspace based application doesn't find a network interface

    Be sure that the pcap library is installed and you are running the demo
    as root.

